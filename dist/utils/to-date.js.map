{"version":3,"file":"to-date.js","sources":["../../src/utils/to-date.js"],"sourcesContent":["/**\n * @name toDate\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n */\nexport default function toDate(argument) {\n  const argStr = Object.prototype.toString.call(argument);\n\n  if (typeof argument === 'function') {\n    argument = argument();\n  }\n\n  if (\n    argument instanceof Date ||\n    (typeof argument === 'object' && argStr === '[object Date]')\n  ) {\n    return argument;\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if (\n      (typeof argument === 'string' || argStr === '[object String]') &&\n      typeof console !== 'undefined'\n    ) {\n      console.warn('Please use `Date.parse` to parse strings.');\n\n      console.warn(new Error().stack);\n    }\n    return new Date(NaN);\n  }\n}\n"],"names":["toDate","argument","argStr","Object","prototype","toString","call","Date","console","warn","Error","stack","NaN"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,MAAMA,CAACC,QAAQ,EAAE;EACvC,MAAMC,MAAM,GAAGC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACL,QAAQ,CAAC;AAEvD,EAAA,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;IAClCA,QAAQ,GAAGA,QAAQ,EAAE;AACvB;AAEA,EAAA,IACEA,QAAQ,YAAYM,IAAI,IACvB,OAAON,QAAQ,KAAK,QAAQ,IAAIC,MAAM,KAAK,eAAgB,EAC5D;AACA,IAAA,OAAOD,QAAQ;GAChB,MAAM,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIC,MAAM,KAAK,iBAAiB,EAAE;AACvE,IAAA,OAAO,IAAIK,IAAI,CAACN,QAAQ,CAAC;AAC3B,GAAC,MAAM;AACL,IAAA,IACE,CAAC,OAAOA,QAAQ,KAAK,QAAQ,IAAIC,MAAM,KAAK,iBAAiB,KAC7D,OAAOM,OAAO,KAAK,WAAW,EAC9B;AACAA,MAAAA,OAAO,CAACC,IAAI,CAAC,2CAA2C,CAAC;MAEzDD,OAAO,CAACC,IAAI,CAAC,IAAIC,KAAK,EAAE,CAACC,KAAK,CAAC;AACjC;AACA,IAAA,OAAO,IAAIJ,IAAI,CAACK,GAAG,CAAC;AACtB;AACF;;;;"}